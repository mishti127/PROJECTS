#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_CITIES 100

typedef struct {
    int city;
    int weight;
} Edge;

typedef struct {
    Edge edges[MAX_CITIES];
    int num_edges;
} Graph;

void initializeGraph(Graph* graph) {
    for (int i = 0; i < MAX_CITIES; i++) {
        graph[i].num_edges = 0;
    }
}

void addEdge(Graph* graph, int src, int dest, int weight) {
    if (src >= MAX_CITIES || dest >= MAX_CITIES) {
        printf("Error: City index out of bounds.\n");
        return;
    }
    int edge_index = graph[src].num_edges;
    graph[src].edges[edge_index].city = dest;
    graph[src].edges[edge_index].weight = weight;
    graph[src].num_edges++;
}

void printGraph(Graph* graph, int num_cities) {
    printf("\nGraph structure:\n");
    for (int i = 0; i < num_cities; i++) {
        printf("City %d:\n", i);
        for (int j = 0; j < graph[i].num_edges; j++) {
            printf(" -> %d (weight: %d)\n", graph[i].edges[j].city, graph[i].edges[j].weight);
        }
    }
    printf("\n");
}

void topologicalSortUtil(Graph* graph, int v, int* visited, int* stack, int* stack_index) {
    visited[v] = 1;
    for (int i = 0; i < graph[v].num_edges; i++) {
        int neighbor = graph[v].edges[i].city;
        if (!visited[neighbor]) {
            topologicalSortUtil(graph, neighbor, visited, stack, stack_index);
        }
    }
    stack[(*stack_index)++] = v;
}

void topologicalSort(Graph* graph, int num_cities, int* stack) {
    int visited[MAX_CITIES] = {0};
    int stack_index = 0;

    for (int i = 0; i < num_cities; i++) {
        if (!visited[i]) {
            topologicalSortUtil(graph, i, visited, stack, &stack_index);
        }
    }

   
    for (int i = 0; i < stack_index / 2; i++) {
        int temp = stack[i];
        stack[i] = stack[stack_index - i - 1];
        stack[stack_index - i - 1] = temp;
    }
}

void shortestPathDAG(Graph* graph, int num_cities, int source, int destination) {
    int stack[MAX_CITIES];
    topologicalSort(graph, num_cities, stack);

    int distances[MAX_CITIES];
    for (int i = 0; i < num_cities; i++) {
        distances[i] = INT_MAX;
    }
    distances[source] = 0;

    for (int i = 0; i < num_cities; i++) {
        int current = stack[i];
        if (distances[current] != INT_MAX) {
            for (int j = 0; j < graph[current].num_edges; j++) {
                int neighbor = graph[current].edges[j].city;
                int weight = graph[current].edges[j].weight;
                if (distances[current] + weight < distances[neighbor]) {
                    distances[neighbor] = distances[current] + weight;
                }
            }
        }
    }

    if (distances[destination] == INT_MAX) {
        printf("There is no path from city %d to city %d.\n", source, destination);
    } else {
        printf("The fastest route from city %d to city %d is %d.\n", source, destination, distances[destination]);
    }
}

int main() {
    Graph graph[MAX_CITIES];
    initializeGraph(graph);

    int num_cities, num_edges;
    printf("Enter the number of cities: ");
    scanf("%d", &num_cities);

    printf("Enter the number of edges: ");
    scanf("%d", &num_edges);

    printf("Enter each edge in the format: source destination weight\n");
    for (int i = 0; i < num_edges; i++) {
        int src, dest, weight;
        scanf("%d %d %d", &src, &dest, &weight);
        addEdge(graph, src, dest, weight);
    }

    printGraph(graph, num_cities);

    int source, destination;
    printf("Enter the source city: ");
    scanf("%d", &source);

    printf("Enter the destination city: ");
    scanf("%d", &destination);

    shortestPathDAG(graph, num_cities, source, destination);

    return 0;
}
